#!/bin/bash
# usage: backup_update_copy [pwdfile] [path/]backupsetname_disknum.lst [ mountonly | dryrun | md5 [prev_md5_file.md5 ] ]

# set bupdir: the directory where the unencrypted mounts of the backup disks will appear e.g. ($bupdir/20201118_001)
#bupdir="/volumeSATA1/satashare1-1"
bupdir=/volume1/NetBackup

if [[ $1 != *.lst && -f $1 ]] ; then pwdfile=$1 ; shift ; chmod 000 "$pwdfile" ; fi # restrict access just in case one forgot

if [[ ! -d "$bupdir" ]] ; then echo "Backup target directory $bupdir not found - exit" ; exit 1 ; fi

if [[ $1 == *.lst && -f $1 ]] ; then
	# assume backup_diskset_copy [path/]backupsetname_disknum.lst [ options ]
	wrkdir=$(dirname "$1") ; if [[ ${wrkdir:0:1} != '/' ]] ; then wrkdir="$(pwd)/$wrkdir" ; fi
	name=$(basename "$1" | sed -e 's/_[0-9][0-9][0-9].lst$//')
	dn=$(basename "$1" | sed -e 's/.*_\([0-9][0-9][0-9]\).lst$/\1/' -e 's/[0]*//')
	shift
	opts=("$@")
	if [[ ${opts[0]} == "dryrun" ]] ; then dryrun=y ; fi
else
	echo "usage: $0 [pwdfile] [path/]backupsetname_disknum[.lst] [ mountonly | dryrun | md5 [prev_md5_file.md5 ] ]" >&2
	echo "note:  when mountonly or dryrun is specified, no log file is created and md5 verification is skipped" >&2
	echo "note:  the pwdfile is used if the files are fetched with rsync over the network; for local (filesystem)" >&2
	echo "       rsync, this is not necessary. the copy method is hardcoded in the copy section; two examples are given" >&2
	exit 1
fi

dsk=$(printf "%s_%03d" "$name" "$dn")
#echo "$bupdir#$wrkdir#$name#$dn#$dsk#${opts[@]}#" ; exit

if [[ -d "$bupdir/$dsk" ]] ; then
	echo "INFO: $bupdir/$dsk exists - assuming it is the mounted backup disk $dsk"
else
	echo "Mounting @$dsk@"
	mkdir -pv "$bupdir/@$dsk@"
	mkdir -p  "$bupdir/$dsk"
	if (( $(df -P | grep "$bupdir/$dsk" | wc -l) == 0 )) ; then
		mount.ecryptfs "$bupdir/@$dsk@" "$bupdir/$dsk" -o rw,noauto,ecryptfs_cipher=aes,ecryptfs_key_bytes=32,ecryptfs_passthrough=n,ecryptfs_enable_filename_crypto=y
		ls -l "$bupdir/$dsk"
	else
		echo "Target directory $bupdir/$dsk already mounted"
		# if the target dir is already mounted, this script can also be run from the task manager (doesn't require user input in that case)
	fi
fi
if [[ ${opts[0]} = "mountonly" ]] ; then exit ; fi

bdl="$wrkdir/$dsk.lst"
if [[ ! -f "$bdl" ]] ; then echo "Backup todo list $bdl not found - exit" ; exit 1 ; fi
log="$wrkdir/$dsk.log"
if [[ -n $dryrun ]] ; then log=/dev/null ; fi # don't overwrite log file in dryrun (could be enabled if necessary)

echo "Creating backup disk $dn from disk set \"$name\" ($bdl) in $bupdir" | tee $log
if [[ -n $dryrun ]] ; then echo ">>DRY RUN<<" | tee -a $log ; fi

echo "Deleting files on $dsk" | tee -a $log
# cleanup of files that are no longer in the copy set
grep '^-' "$bdl" | cut -f 5 | while read f ; do
	if [[ -n $dryrun ]] ; then
		echo "Will remove: $bupdir/$dsk/$f" | tee -a $log
	else
		if [[ ! -f "$bupdir/$dsk/$f" ]] ; then
			echo "WARNING: can't delete: $f not found on $dsk" | tee -a $log
		else
			rm "$bupdir/$dsk/$f" ; # no output to log or stdout, only stderr if rm fails
		fi
	fi
done

echo "Moving and renaming files on $dsk" | tee -a $log
grep '^[=>]' "$bdl" | while IFS=$'\t' read f1 f1 f3 f4 f5 f6 ; do #
	if [[ ! -f "$bupdir/$dsk/$f4" ]] ; then echo "WARNING: can't move: $f4 not found on $dsk" | tee -a $log ; fi # just checking...
	if [[   -f "$bupdir/$dsk/$f6" ]] ; then echo "WARNING: can't move: $f6 already exists on $dsk - skipping" | tee -a $log ; continue ; fi # just checking...
	mkdir -p "$(dirname "$bupdir/$dsk/$f6")"
	if [[ -n $dryrun ]] ; then
		echo "Will move: $bupdir/$dsk/$f4 to $bupdir/$dsk/$f6" | tee -a $log
	else
		mv "$bupdir/$dsk/$f4" "$bupdir/$dsk/$f6" ; # no output to log or stdout, only stderr
	fi
done

# cleanup any trailing empty directories
if [[ -n $dryrun ]] ; then
	echo "Skipping empty directory cleanup (in dry run, the relevant directories are not yet emptied)" | tee -a $log
else
	echo "Cleanup of empty directories on $dsk" | tee -a $log
	find "$bupdir/$dsk" -depth -mindepth 1 -type d -empty -exec rmdir {} \; # no output to log or stdout, only stderr
fi
df -B 1 "$bupdir/$dsk" | tee -a $log # log how much space was deleted / will be reused

echo "Copying modified and new files to $dsk" | tee -a $log
# copy files with rsync - using rsync also makes it possible to resume copying after the process got aborted
# note: with --files-from, the -r (--recursive) from -a is not implied (see man page), so if the input list contains directories, only the directory is copied, not its contents (that's how it should be in this case)
# note: the --delete-before option doesn't seem to work to clean up any rogue files before copying (for instance, when reusing the disk second time 'round and reusing as many files as possible). hence the files were cleaned out with diff producing the ^- wipe list
flist=$(mktemp)
grep -P '^\*' "$bdl" | cut -f 8 >  $flist # the modified files
grep -P '^\+' "$bdl" | cut -f 5 >> $flist # the new files
if [[ -z $pwdfile ]] ; then
	# interactive mode
	tmp=$(mktemp) ; echo -n "Password: " ; read -s pwd ; echo "$pwd" > $tmp ; chmod 000 $tmp ; pwdfile=$tmp
fi
if [[ -n $dryrun ]] ; then
	#rsync -avn --files-from="$flist" --relative --dirs / "$bupdir/$dsk" | tee -a $log
	rsync -avn --files-from="$flist" --relative --dirs --copy-dirlinks --password-file="$pwdfile" rsync://admin@192.168.2.101/NetBackup "$bupdir/$dsk" | tee -a $log
else
	#rsync -av --files-from="$flist" --relative --dirs / "$bupdir/$dsk" # use rsync to copy from and to local filesystem
	rsync -av --files-from="$flist" --relative --dirs --copy-dirlinks --password-file="$pwdfile" rsync://admin@192.168.2.101/NetBackup "$bupdir/$dsk/" # use rsync to read files from remote server and store on local file system
	# PS> no output to log or stdout, only stderr
fi
if [[ -n $tmp ]] ; then rm $tmp ; fi
rm $flist

# re-read the disk by calculating the md5 check sums and register the moddate and size
# the catenation of these files can be crosschecked with the master md5 files using md5diff
# strip the $bupdir base path from the files listed so they start with $dsk/...
df -B 1 "$bupdir/$dsk" | tee -a $log # log the final utilisation of the disk
if [[ -n $dryrun ]] ; then
	echo "Skipping verification of $bupdir/$dsk to $wrkdir/$dsk.[fst|md5] (dry run)" | tee -a $log
	# and don't unmount
else
	echo "Fast scan of $dsk (save output in $wrkdir/$dsk.fst)" | tee -a $log
	mkfilelist_fast "$bupdir/$dsk" | sed -e "s#\t$bupdir/$dsk/#\t#" > "$wrkdir/$dsk.fst"
	if [[ ${opts[0]} == md5 ]] ; then
		if [[ -z ${opts[1]} ]] ; then
			# full md5 scan
			echo "Verifying $dsk (save output in $wrkdir/$dsk.md5)" | tee -a $log
			savepwd=$(pwd) ; cd "$bupdir/$dsk"
			mkfilelist_md5 * > "$wrkdir/$dsk.md5"
			cd "$savepwd"
		elif [[ -f ${opts[1]} ]] ; then
			# incremental md5 scan using previous scan
			prev=${opts[1]}
			# prepend current path if $prev path is not absolute, to make it absolute and work when whe're cd-ing into $bupdir/$dsk
			if [[ ${prev:0:1} != '/' ]] ; then prev="$(pwd)/$prev" ; fi
			echo "Verifying $dsk (using previous scan $prev, save output in $wrkdir/$dsk.md5)" | tee -a $log
			savepwd=$(pwd) ; cd "$bupdir/$dsk"
			mkfilelist_md5 -f $prev * > "$wrkdir/$dsk.md5"
			cd "$savepwd"
		else
			echo "Error: wrong parameter ${opts[1]} - skipping md5sum verification" | tee -a $log
		fi
	fi
#	echo "Unmounting $dsk"
#	umount "$bupdir/$dsk"
#	rmdir "$bupdir/$dsk"
fi
echo "Done" | tee -a $log

#EOF
