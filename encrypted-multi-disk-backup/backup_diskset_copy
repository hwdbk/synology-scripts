#!/bin/bash

bupdir="/volumeSATA1/satashare1-1"
if [[ ! -d "$bupdir" ]] ; then echo "Backup target directory $bupdir not found - exit" ; exit 1 ; fi

if [[ -f "$1" && $(basename "$1" | sed -e 's/.*\(\....\)$/\1/') = ".lst" ]] ; then
	# assume backup_diskset_copy [path/]backupsetname_disknum.lst [ mountonly | dryrun ]
	tmpdir=$(dirname "$1")
	name=$(basename "$1" | sed -e 's/_[0-9][0-9][0-9].lst$//')
	dn=$(basename "$1" | sed -e 's/.*_\([0-9][0-9][0-9]\).lst$/\1/' -e 's/[0]*//')
elif [[ -n $(grep ".*_[0-9][0-9][0-9]$" <<< $1) ]] ; then
	# assume backup_diskset_copy backupsetname_disknum [ mountonly | dryrun ]
	tmpdir="/volume1/backup_mounts/_backup_sets"
	name=$(basename "$1" | sed -e 's/_[0-9][0-9][0-9]$//')
	dn=$(basename "$1" | sed -e 's/.*_\([0-9][0-9][0-9]\)$/\1/' -e 's/[0]*//')
else
	echo "usage:   $0 [path/]backupsetname_disknum[.lst] [ mountonly | dryrun | nomd5 ]"
#	echo "         $0 [path/]@backupsetname_disknum@     [ mountonly | dryrun | nomd5 ]"
	echo "example: $0 20180805_003 mountonly"
	echo "note:    when mountonly or dryrun is specified, no log file is created and md5 verification is skipped"
	exit 1
fi

dsk=$(printf "%s_%03d" "$name" "$dn")
opts=$2
#echo "$bupdir # $tmpdir # $name # $dn # $dsk # $opts" ; exit

echo "Mounting $dsk"
mkdir -pv "$bupdir/@$dsk@"
mkdir -p  "$bupdir/$dsk"
if (( $(df -P | grep "$bupdir/$dsk" | wc -l) == 0 )) ; then
	mount.ecryptfs "$bupdir/@$dsk@" "$bupdir/$dsk" -o rw,noauto,ecryptfs_cipher=aes,ecryptfs_key_bytes=32,ecryptfs_passthrough=n,ecryptfs_enable_filename_crypto=y
	ls -l "$bupdir/$dsk"
else
	echo "Target directory $bupdir/$dsk already mounted"
	# if the target dir is already mounted, this script can also be run from the task manager (doesn't require user input in that case)
fi
if [[ $opts = "mountonly" ]] ; then exit ; fi

bdl="$tmpdir/$dsk.lst"
if [[ ! -f "$bdl" ]] ; then echo "Backup list $bdl not found - exit" ; exit 1 ; fi
log="$tmpdir/$dsk.log"
if [[ $opts = "dryrun" ]] ; then log=/dev/null ; fi # don't overwrite log file in dryrun (could be enabled if necessary)

echo "Creating backup disk $dn from disk set \"$name\" ($bdl) in $bupdir" | tee $log
if [[ $opts = "dryrun" ]] ; then echo ">>DRY RUN<<" | tee -a $log ; fi

echo "Cleanup $dsk" | tee -a $log
# cleanup of files that are no longer in the copy set
# note: the $bdl todo list is not necessarily sorted: it may contain several shares in the specified order, only having sorted the paths WITHIN the share
inlist=$(mktemp) ; sort "$bdl" > $inlist
ondisk=$(mktemp) ; find "$bupdir/$dsk" -type f | sed -e "s#^$bupdir/$dsk##" | sort > $ondisk
diff $inlist $ondisk | grep '^> ' | sed -e "s/^> //" | while read f ; do
	if [[ $opts = "dryrun" ]] ; then
		echo "Will remove: $bupdir/$dsk/$f" | tee -a $log
	else
		rm "$bupdir/$dsk/$f" ; # no output to log or stdout, only stderr
	fi
done
rm $inlist $ondisk
# cleanup any trailing empty directories
if [[ $opts = "dryrun" ]] ; then
	echo "Skipping empty directory cleanup (dry run)" | tee -a $log
else
	find "$bupdir/$dsk" -depth -mindepth 1 -type d -empty -exec rmdir {} \; # no output to log or stdout, only stderr
fi
df -B 1 "$bupdir/$dsk" | tee -a $log # log how much space was deleted / will be reused

echo "Copying $dsk" | tee -a $log
# copy files with rsync - using rsync also makes it possible to resume copying after the process got aborted
# note: with --files-from, the -r (--recursive) from -a is not implied (see man page), so if the input list contains directories, only the directory is copied, not its contents (that's how it should be in this case)
# note: the --delete-before option doesn't seem to work to clean up any rogue files before copying (for instance, when reusing the disk second time 'round and reusing as many files as possible). hence the files are cleaned out with diff
if [[ $opts = "dryrun" ]] ; then
	rsync -avn --files-from="$bdl" --relative --dirs / "$bupdir/$dsk" | tee -a $log
else
	rsync -a --files-from="$bdl" --relative --dirs / "$bupdir/$dsk" # no output to log or stdout, only stderr
fi
# re-read the disk by calculating the md5 check sums and register the moddate and size
# the catenation of these files can be crosschecked with the master md5 files using md5diff
df -B 1 "$bupdir/$dsk" | tee -a $log # log the final utilisation of the disk
if [[ $opts = "dryrun" ]] ; then
	echo "Skipping verification (dry run)" | tee -a $log
elif [[ $opts = "nomd5" ]] ; then
	echo "Fast scan of $dsk (save output in $tmpdir/$dsk.fst)" | tee -a $log
	mkfilelist_fast "$bupdir/$dsk" > "$tmpdir/$dsk.fst"
else
	echo "Verifying $dsk (save output in $tmpdir/$dsk.md5)" | tee -a $log
	mkfilelist_md5 "$bupdir/$dsk" > "$tmpdir/$dsk.md5"
	echo Unmounting $dsk
	umount "$bupdir/$dsk"
	rmdir "$bupdir/$dsk"
fi
echo Done | tee -a $log

#EOF
