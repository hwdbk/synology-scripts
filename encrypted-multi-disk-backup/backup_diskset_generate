#!/bin/bash
# usage: backup_diskset_generate /path/dir1 [ /path/dir2 | newdisk ] ...

# constants
bsetdir=/volume1/backup_mounts/_backup_sets
TODAY=$(date +%Y%m%d)
GB=$((10**9))
TB=$((10**12))
EXT4ALLOCBLKSZ=4096
ECRYPTFSHEADER=8192

# disk size to use - make sure to get the true free space on an empty, formatted disk, not just 3*$TB, for instance
# use df -B 1 to get the free space of a fresh formatted disk; then subtract some safe margin
DS=$((2953141284864 - 10*GB))

if [[ -d "$(dirname "$bsetdir")" ]] ; then mkdir -p "$bsetdir" ; else echo "Directory $(dirname "$bsetdir") not found - exit" ; exit 1 ; fi
if [[ ! -d "$bsetdir" ]] ; then echo "Directory $bsetdir not found - exit" ; exit 1 ; fi

# backup set name
name=$TODAY
log="$bsetdir/$name.log"
echo "Executed command: $0 $@" | tee $log

echo "Generating disk set \"$name\" in $bsetdir" | tee -a $log
rm -f "$bsetdir/$name"_[0-9][0-9][0-9].lst

# find does not produce a sorted output - create a sorted 'todo' list - by order in "$@" but within $i sorted by path name - this creates the most reproducible result when cut in chunks per disk
# the best strategy for reusing disks is to compose the list "$@" such that the directories that don't vary much IN SIZE over time, are specified in the parameter list FIRST
rm -f "$bsetdir/$name.fst"
for i in "$@" ; do
	if [ -d "$i" ] ; then
		echo "Scanning $i" | tee -a $log
		# generate a 'todo' list for each directory sorted by path and in mkfilelist_fast format
		find "$i" -type f \( ! -path "*/#recycle/*" ! -path "*/@eaDir/*" ! -path "*-/*" \) -printf "%TY%Tm%Td_%TH%TM%TS\t%s\t\t%p\n" | sed -e 's/\(^........_......\)\.[0-9]*/\1/' | sort -k 3 >> "$bsetdir/$name.fst"
	elif [[ "$i" = "newdisk" ]] ; then
		echo "Inserting new disk marker" | tee -a $log
		echo "#newdisk" >> "$bsetdir/$name.fst"
	else
		echo "Warning: $i is not a valid source directory" | tee -a $log
	fi
done

# start with a imaginary full disk0
dn=0
sz=$DS

# read the 'todo' list and determine how much of it will fit on the next disk
while read m b f ; do
	if [[ $m = "#newdisk" ]] ; then
		echo "Found new disk marker" | tee -a $log
		sz=$DS
	else
		bb=$(( (((b + ECRYPTFSHEADER)/EXT4ALLOCBLKSZ)+1)*EXT4ALLOCBLKSZ )) # size on disk
		sz=$((sz + bb))
		if (( $sz >= $DS )) ; then
			# start a new disk
			sz=$bb ; dn=$((dn+1))
			echo "Generating disk$dn" | tee -a $log
			bl=$(printf "%s_%03d.lst" "$name" "$dn")
		fi
		# add to copy list
		echo "$f" >> "$bsetdir/$bl"
	fi
done < "$bsetdir/$name.fst"

echo "Disk layout:" | tee -a $log
for d in "$bsetdir/$name"_[0-9][0-9][0-9].lst ; do
	echo $(basename $d) | tee -a $log
	for i in "$@" ; do
		if grep -l "$i" "$d" > /dev/null ; then echo -e "\t$i" | tee -a $log ; fi
	done
done

echo "Done" | tee -a $log

# snippet to check the size of the disk set. note that I've seen discrepancies between the ls -l size and the find -printf "%s" size...
# sz=0 ; while read f ; do b=$(ls -l "$f" | sed -e 's/ /\t/g' | cut -f 5) ; sz=$((sz+b)) ; done < /volume1/vault/_tmp/backup_disk_001.lst ; echo $sz

#EOF
